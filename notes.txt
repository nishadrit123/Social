All env vars are loaded from .env in root folder
air init creates an air.toml file where instructions to run the application exists 

To run
    a. Backend
        1. docker-compose build
        2. docker-compose up -d 
        3. Do "air" (air-verse performs go hot reload)
    b. WebSocket
        1. cd websocket 
        2. go run websocket.go 
    c. frontend
        1. cd web 
        2. npm start

To push 
    a. Do git push origin master 
    b. Enter something passphrase

Note
    a. Get from redis is called at different places accross the app with common function in common.go
        1. User for ( posts, followers, following count )
            Get user, jump to user profile from a post
        2. Post for ( likes and comment count )
            Get post, feed, saved post, all posts of a user, sent post 
    b. Get compact info related to users and groups, a given user is following, a follower and a part of using 
       common functions defined in common.go

Nats
    a. Pub-Sub
        Notification, online/offline status, typing indicator in chat
    b. Jetstream 
        Chatting, sending posts 

WebSocket
    a. Used for real time Chatting between users and group without the need of reloading the page
    b. Websocket channel is as follows 
        1. Users: senderID (user) -> receiverID (user)
        2. Group: senderID (user) -> groupID (group) - receiverID (all users of that group) 

Pending
    concurrency handling
    gitignore node_modules folder